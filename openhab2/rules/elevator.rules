rule "ON Startup: Initialize Floor Switches"
when
    System started
then
    createTimer(now.plusSeconds(30), [|
        var String results = ""
        results = executeCommandLine("python3 /home/openhabian/Elevator-AI/nfc_reader/show_active_switches.py", 5000)
        if (results != "")
        {
            logInfo("startupRule", "Initializing Floor Switches")
            for (String i : results.split(","))
            {
                postUpdate(i,"ON")
            }
        }
    ])
end


rule "Power Mode Options"
when
    Item PowerMode received update
then 
    if (PowerMode.state.toString == "0")
    {    
        //TODO:  
        //Check SwitchNet and PowerNet is within range otherwise send elevator to Lobby  
        //Check Power Status is ON to proceed
        //Move switch one way then check Power Status if not OFF then move switch other way 
        SwitchAdapter.sendCommand(OFF)
        //TEMPORAL (JUST FOR DISPLAY)
        PowerStatus.sendCommand(OFF)
        //logInfo("P-Mode", "OFF")
    }
    if (PowerMode.state.toString == "1")
    {        
        //TODO:
        //Check SwitchNet and PowerNet is within range 
        //Check Power Status is OFF to proceed
        //Move switch one way then check Power Status if not ON then move switch other way 
        SwitchAdapter.sendCommand(ON)
        //TEMPORAL (JUST FOR DISPLAY)
        PowerStatus.sendCommand(ON)
        //logInfo("P-Mode", "ON")
    }
    if (PowerMode.state.toString == "2")
    {       
        //TODO: 
        //while (PowerMode.state == "AUTO")
        //Check time, if time 8 AM and SwitchNet within range
        //Check Power Status is OFF to proceed
        //Move switch one way then check Power Status if not OFF then move switch other way 
        //Check time, if time 8 PM send elevator to Lobby so that SwitchNet within range
        //Check Power Status is ON to proceed
        //Move switch one way then check Power Status if not ON then move switch other way 
        //logInfo("P-Mode", "AUTO")
    }
end


rule "Activate Pisos Y Oficinas"
when
    Member of PisosYOficinas received command
then
    var String results = ""
    results = executeCommandLine("python3 /home/openhabian/Elevator-AI/nfc_reader/activate_panda.py --input " + triggeringItem.name + " --switch " + receivedCommand, 4000)
    logInfo("exec activate_panda.py", "Results are: " + results)
    if (results != "")
    {
        for (String i : results.split(","))
        {
            postUpdate(i,receivedCommand.toString)
        }
    }
end


rule "NFC Tag ID: Search, Add, Delete"
when
    Item OptionInputNFC received command
then 
    if (receivedCommand.toString == "0") // Ver (Look) -------------------------------
    {   
        if (PisoNFC.state != NULL && OficinaNFC.state != NULL) //not initialized yet
        {
            var String results = ""
            results = executeCommandLine("python3 /home/openhabian/Elevator-AI/nfc_reader/ver.py --input P"+PisoNFC.state+"O"+OficinaNFC.state, 4000)
            logInfo("exec ver.py", "Results are: " + results)
            if (results != "") 
            { 
                OptionOutputNFC.postUpdate(results)
                OptionOutputNFC.sendCommand(REFRESH) //Speeds up process a bit
            }
        }
        else
        {
            OptionOutputNFC.postUpdate("Debes elegir piso y oficina")
        }        
    }
    if (receivedCommand.toString == "1") // Agregar (Add)-----------------------------
    {        
        if (PisoNFC.state != NULL && OficinaNFC.state != NULL && NFCTagID.state != NULL) //not initialized yet
        {
            OptionOutputNFC.postUpdate("PROCESANDO...")
            var String results = ""
            results = executeCommandLine("python3 /home/openhabian/Elevator-AI/nfc_reader/agregar.py --input P"+PisoNFC.state+"O"+OficinaNFC.state+" --uuid "+NFCTagID.state, 4000)
            logInfo("exec agregar.py", "Results are: " + results)
            if (results != "") { OptionOutputNFC.postUpdate(results) }
        }
        else
        {
            OptionOutputNFC.postUpdate("Escanea un dispositivo o tarjeta y luego elige piso y oficina")
        }       
    }
    if (receivedCommand.toString == "2") // Borrar (Delete)----------------------------
    {       
        if (PisoNFC.state != NULL && OficinaNFC.state != NULL && NFCTagID.state != NULL) //not initialized yet
        {
            OptionOutputNFC.postUpdate("PROCESANDO...")
            var String results = ""
            results = executeCommandLine("python3 /home/openhabian/Elevator-AI/nfc_reader/borrar.py --input P"+PisoNFC.state+"O"+OficinaNFC.state+" --uuid "+NFCTagID.state, 4000)
            logInfo("exec borrar.py", "Results are: " + results)
            if (results != "") { OptionOutputNFC.postUpdate(results) }
        }
        else
        {
            OptionOutputNFC.postUpdate("Escanea un dispositivo o tarjeta y luego elige piso y oficina")
        }      
    }
end


rule "Botonera Single Press"
when
    Member of Botones received command ON
then 
    if (BDetener.state != ON)
    {
        var String results = ""
        results = executeCommandLine("python3 /home/openhabian/Elevator-AI/botonera/presionar_boton.py --input " + triggeringItem.name, 4000)
        logInfo("exec presionar_boton.py", "Results are: " + results)
    }
end

rule "Botonera Long Press BAlarma"
when
    Item BAlarma received command ON
then 
    var String results = ""
    results = executeCommandLine("python3 /home/openhabian/Elevator-AI/botonera/presionar_boton.py --input " + triggeringItem.name, 8000)
    logInfo("exec presionar_boton.py", "Results are: " + results)
    BAlarma.sendCommand(OFF)
end

rule "Botonera two state press BDetener"
when
    Item BDetener received command
then 
    var String results = ""
    results = executeCommandLine("python3 /home/openhabian/Elevator-AI/botonera/presionar_boton.py --input " + triggeringItem.name + " --switch " + receivedCommand, 4000)
    logInfo("exec presionar_boton.py", "Results are: " + results)
end

