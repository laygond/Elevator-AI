rule "ON Startup"
when
    System started
then
    createTimer(now.plusSeconds(10), [|
        var String results = ""
        logInfo("startupRule", "Before")
        results = executeCommandLine("source /home/openhabian/Elevator-AI/on_startup/virtualEnvActivate.sh", 5000)
        logInfo("startupRule", "Results are: " + results)
    ])
end


rule "Power Mode Options"
when
    Item PowerMode received update
then 
    if (PowerMode.state.toString == "0")
    {    
        //TODO:  
        //Check SwitchNet and PowerNet is within range otherwise send elevator to Lobby  
        //Check Power Status is ON to proceed
        //Move switch one way then check Power Status if not OFF then move switch other way 
        SwitchAdapter.sendCommand(OFF)
        //TEMPORAL (JUST FOR DISPLAY)
        PowerStatus.sendCommand(OFF)
        //logInfo("P-Mode", "OFF")
    }
    if (PowerMode.state.toString == "1")
    {        
        //TODO:
        //Check SwitchNet and PowerNet is within range 
        //Check Power Status is OFF to proceed
        //Move switch one way then check Power Status if not ON then move switch other way 
        SwitchAdapter.sendCommand(ON)
        //TEMPORAL (JUST FOR DISPLAY)
        PowerStatus.sendCommand(ON)
        //logInfo("P-Mode", "ON")
    }
    if (PowerMode.state.toString == "2")
    {       
        //TODO: 
        //while (PowerMode.state == "AUTO")
        //Check time, if time 8 AM and SwitchNet within range
        //Check Power Status is OFF to proceed
        //Move switch one way then check Power Status if not OFF then move switch other way 
        //Check time, if time 8 PM send elevator to Lobby so that SwitchNet within range
        //Check Power Status is ON to proceed
        //Move switch one way then check Power Status if not ON then move switch other way 
        //logInfo("P-Mode", "AUTO")
    }
end


rule "Pisos Y Oficinas"
when
    Member of PisosYOficinas received command
then
    var String results = ""
    results = executeCommandLine("python3 /home/openhabian/Elevator-AI/nfc_reader/activate_panda.py --input " + triggeringItem.name + " --switch " + receivedCommand, 4000)
    logInfo("execRule", "Results are: " + results)
    if (results != "")
    {
        for (String i : results.split(","))
        {
            postUpdate(i,receivedCommand.toString)
        }
    }
end


rule "LED Controller"
when
    Item LEDColorStr changed
then
    createTimer(now.plusMillis(500), [ |
        LEDColorStr.sendCommand("0;0;0")
    ])
    logInfo("LED Color was ", "receivechange" )
end